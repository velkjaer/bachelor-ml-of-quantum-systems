%!PS-Adobe-3.0 EPSF-3.0
%%Title: (\(DTU Nanotek B UK 8.0.eps\))
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 20:12:28 10/17/09
%%For: (\(PeopleGroup\) \(PeopleGroup\))
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 25 238 55
%%HiResBoundingBox: 0.0 24.7666 238.0 54.6074
%%Pages: 0
%%DocumentProcessColors: Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3698 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2009-10-17T20:12:28+02:00</xap:CreateDate>
         <xap:ModifyDate>2009-10-17T20:12:28+02:00</xap:ModifyDate>
         <xap:MetadataDate>2009-10-17T20:12:28+02:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:637CF6A048BBDE119BF19FDCC18129B4</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:637CF6A048BBDE119BF19FDCC18129B4</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:documentName>6f002b1d-f362-11dc-0000-e752614c683b</stRef:documentName>
            <stRef:documentID>6f002b1d-f362-11dc-0000-e752614c683b</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">(DTU Nanotek B UK 8.0.eps)</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>(PeopleGroup) (PeopleGroup)</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 24.7666 238.0 29.8408 rectclip
q
0.0 24.7666 m
238.0 24.7666 l
238.0 54.6074 l
0.0 54.6074 l
h
W
n
q
0.1 0.0 0.0 0.1 0.0 0.0 cm
n
[/DeviceCMYK] cs 0.0 0.910156 0.720703 0.22998 sc
0.726563 287.687988 35.718800 226.776978 rectfill

n
866.094 436.395 m
867.234 436.477 868.324 435.813 868.324 434.621 c
868.324 428.547 l
868.324 426.797 867.844 426.074 865.855 425.652 c
862.488 424.934 857.078 424.211 850.586 424.211 c
834.594 424.211 824.07 434.797 824.07 453.43 c
824.07 463.711 l
824.07 482.355 834.535 492.93 850.586 492.93 c
857.016 492.93 862.488 492.219 865.855 491.496 c
867.844 491.063 868.324 490.398 868.324 488.605 c
868.324 482.527 l
868.324 481.328 867.289 480.684 866.148 480.73 c
865.727 480.754 l
860.645 480.996 857.441 481.57 850.586 481.57 c
842.953 481.57 837.301 476.758 837.301 463.711 c
837.301 453.43 l
837.301 440.449 842.891 435.574 850.586 435.574 c
857.441 435.574 860.66 435.996 865.676 436.367 c
866.094 436.395 l
h
884.902 427.578 m
884.902 426.262 885.98 425.117 887.246 425.117 c
895.723 425.117 l
897.047 425.117 898.125 426.316 898.125 427.578 c
898.125 477.844 l
903.297 480.359 909.488 481.57 913.398 481.57 c
921.332 481.57 924.762 478.391 924.762 467.141 c
924.762 427.578 l
924.762 426.262 925.844 425.117 927.164 425.117 c
935.582 425.117 l
936.902 425.117 937.988 426.262 937.988 427.578 c
937.988 467.141 l
937.988 483.371 931.074 492.93 916.402 492.93 c
909.551 492.93 903.297 491.496 898.125 488.84 c
898.125 513.672 l
898.125 514.988 897.105 516.086 895.781 516.086 c
872.402 516.086 l
871.078 516.086 870.059 514.988 870.059 513.672 c
870.059 513.672 870.059 514.211 870.059 512.898 c
870.059 511.582 870.941 510.48 872.402 510.051 c
884.902 506.395 l
884.902 427.578 l
h
527.922 456.016 m
519.684 456.016 l
506.938 456.016 503.813 452.645 503.813 445.012 c
503.813 444.055 l
503.813 436.777 507.18 434.855 513.672 434.855 c
518.605 434.855 523.293 436.418 527.922 438.945 c
527.922 456.016 l
h
551.938 431.23 m
553.293 430.793 554.348 429.492 554.348 428.113 c
554.348 426.809 554.348 427.52 554.348 427.52 c
554.348 426.199 553.262 425.117 551.938 425.117 c
531.609 425.117 l
530.293 425.117 529.172 426.199 529.121 427.52 c
529.031 430.207 l
523.617 426.77 516.977 424.211 510.727 424.211 c
500.625 424.211 490.527 428.371 490.527 443.996 c
490.527 444.949 l
490.527 458.301 498.523 465.098 519.684 465.098 c
527.922 465.098 l
527.922 470.145 l
527.922 479.109 524.434 481.809 516.195 481.809 c
508.441 481.809 501.68 481.086 497.266 480.891 c
496.672 480.859 l
495.527 480.813 494.434 481.211 494.434 482.832 c
494.434 488.777 l
494.434 490.105 495.215 490.891 496.836 491.184 c
501.711 492.09 507.961 492.93 516.195 492.93 c
533.09 492.93 541.148 484.934 541.148 470.145 c
541.148 434.719 l
551.938 431.23 l
h
473.418 429.27 m
473.418 512.168 l
473.418 513.43 472.52 514.453 471.195 514.453 c
462.836 514.453 l
461.578 514.453 460.613 513.43 460.613 512.168 c
460.613 445.383 l
460.613 444.949 460.434 444.656 460.254 444.656 c
460.074 444.656 459.77 445.012 459.652 445.32 c
427.188 511.328 l
425.984 513.801 425.023 514.453 422.074 514.453 c
412.281 514.453 l
409.988 514.453 408.129 512.645 408.129 510.359 c
408.129 427.043 l
408.129 425.77 409.148 425.117 410.414 425.117 c
418.648 425.117 l
419.91 425.117 420.875 426.199 420.875 427.461 c
420.875 492.813 l
420.875 493.293 420.996 493.469 421.234 493.469 c
421.477 493.469 421.715 493.293 421.957 492.813 c
453.883 428.242 l
455.141 425.48 457.066 425.117 459.473 425.117 c
469.273 425.117 l
471.559 425.117 473.418 426.98 473.418 429.27 c
h
679.734 463.293 m
679.734 474.355 675.043 481.457 665.188 481.457 c
655.387 481.457 650.699 474.414 650.699 463.293 c
650.699 453.855 l
650.699 442.793 655.328 435.691 665.188 435.691 c
674.984 435.691 679.734 442.734 679.734 453.855 c
679.734 463.293 l
h
665.188 424.211 m
646.91 424.211 637.473 436.418 637.473 453.855 c
637.473 463.293 l
637.473 480.73 646.91 492.93 665.188 492.93 c
683.461 492.93 692.965 480.73 692.965 463.293 c
692.965 453.855 l
692.965 436.418 683.461 424.211 665.188 424.211 c
h
714.105 441.824 m
714.105 427.156 719.52 424.211 731.848 424.211 c
734.309 424.211 737.191 424.52 739.84 424.934 c
741.402 425.188 742.066 425.898 742.066 427.043 c
742.066 432.93 l
742.066 434.133 741.16 434.68 739.543 434.68 c
732.988 434.68 l
728.418 434.68 727.395 435.52 727.395 441.824 c
727.395 481.688 l
739.297 481.688 l
740.621 481.688 741.703 482.773 741.703 484.094 c
741.703 489.688 l
741.703 491.008 740.621 492.09 739.297 492.09 c
727.395 492.09 l
727.395 504.836 l
727.395 506.184 726.27 506.953 725.105 506.758 c
716.391 505.32 l
715.023 505.09 714.105 504.082 714.105 502.91 c
714.105 492.09 l
701.348 492.09 l
700.027 492.09 699.004 491.125 699.004 489.805 c
699.004 488.848 l
699.004 487.52 700.027 486.516 701.348 486.055 c
714.105 482.305 l
714.105 441.824 l
h
568.063 427.578 m
568.063 426.262 569.141 425.117 570.406 425.117 c
578.883 425.117 l
580.203 425.117 581.289 426.316 581.289 427.578 c
581.289 477.121 l
586.578 479.824 591.633 481.633 596.195 481.633 c
605.395 481.633 607.922 478.262 607.922 466.965 c
607.922 427.578 l
607.922 426.262 609.004 425.117 610.328 425.117 c
618.738 425.117 l
620.063 425.117 621.148 426.262 621.148 427.578 c
621.148 468.379 l
621.148 481.73 616.539 492.93 600.281 492.93 c
592.77 492.93 587.73 491.395 580.422 486.887 c
580.32 489.688 l
580.273 491.008 579.219 492.09 577.891 492.09 c
555.563 492.09 l
554.238 492.09 553.219 491.008 553.219 489.68 c
553.219 489.68 553.219 490.227 553.219 488.906 c
553.219 487.59 554.105 486.496 555.563 486.063 c
568.063 482.402 l
568.063 427.578 l
h
796.039 464.621 m
796.039 476.223 790.875 481.633 781.855 481.633 c
772.953 481.633 767.363 475.977 767.363 464.621 c
767.363 463.84 l
796.039 463.84 l
796.039 464.621 l
h
805.004 436.926 m
806.09 437.02 807.164 436.418 807.164 435.215 c
807.164 429.211 l
807.164 427.461 806.742 426.633 804.695 426.262 c
797.359 424.914 791.715 424.211 782.273 424.211 c
765.566 424.211 754.078 433.547 754.078 456.57 c
754.078 460.754 l
754.078 478.73 761.031 492.93 781.855 492.93 c
802.922 492.93 809.391 478.254 809.391 460.754 c
809.391 456.98 l
809.391 455.234 808.609 454.148 807.047 454.148 c
767.305 454.148 l
767.305 453.137 l
767.305 442.488 771.57 435.691 782.875 435.691 c
790.754 435.691 799.117 436.457 804.527 436.887 c
805.004 436.926 l
h
273.402 504.836 m
273.402 512.234 l
273.402 513.547 272.383 514.453 271.055 514.453 c
212.738 514.453 l
211.422 514.453 210.336 513.484 210.336 512.234 c
210.336 504.836 l
210.336 503.508 211.422 502.781 212.738 502.781 c
234.984 502.781 l
234.984 427.52 l
234.984 426.199 236.008 425.117 237.27 425.117 c
246.527 425.117 l
247.852 425.117 248.813 426.262 248.813 427.52 c
248.813 502.781 l
271.055 502.781 l
272.383 502.781 273.402 503.574 273.402 504.836 c
h
348.57 457.883 m
348.57 512.168 l
348.57 513.484 347.488 514.453 346.227 514.453 c
337.027 514.453 l
335.703 514.453 334.684 513.43 334.684 512.168 c
334.684 457.883 l
334.684 443.215 330.598 435.813 316.648 435.813 c
302.699 435.813 298.613 443.27 298.613 457.883 c
298.613 512.168 l
298.613 513.484 297.527 514.453 296.27 514.453 c
287.07 514.453 l
285.746 514.453 284.723 513.43 284.723 512.168 c
284.723 457.883 l
284.723 433.586 297.23 424.211 316.648 424.211 c
336.063 424.211 348.57 433.586 348.57 457.883 c
h
189.418 464.719 m
189.418 453.469 188.086 446.594 183.242 441.688 c
179.031 437.441 172.988 435.938 166.094 435.938 c
161.047 435.938 157.555 436.055 154.371 436.238 c
154.371 503.27 l
157.613 503.445 161.047 503.633 166.094 503.633 c
172.719 503.633 178.559 502.258 182.738 498.391 c
187.891 493.625 189.418 486.457 189.418 474.855 c
189.418 464.719 l
h
203.184 464.148 m
203.184 475.422 l
203.184 489.031 201.191 499.094 193.605 506.426 c
187.223 512.59 177.668 515.359 166.094 515.359 c
157.258 515.359 146.855 514.641 143.305 514.031 c
141.504 513.738 140.48 512.707 140.48 510.664 c
140.48 428.895 l
140.48 426.809 141.504 425.832 143.305 425.539 c
146.855 424.934 157.258 424.211 166.094 424.211 c
177.773 424.211 187.398 427.07 193.785 433.371 c
201.266 440.742 203.184 450.691 203.184 464.148 c
0.0 0.0 0.0 1.0 sc
f
n
165.754 286.855 m
156.609 286.855 147.355 287.461 143.867 288.047 c
142.301 288.301 141.34 289.258 141.34 291.055 c
141.34 373.672 l
141.34 375.352 142.301 376.445 143.867 376.68 c
147.355 377.285 156.609 377.891 165.754 377.891 c
187.996 377.891 202.188 366.465 202.188 340.488 c
202.188 324.258 l
202.188 298.516 187.996 286.855 165.754 286.855 c
h
191.246 340.488 m
191.246 362.246 180.18 368.496 165.754 368.496 c
160.098 368.496 156.371 368.379 152.402 368.145 c
152.402 296.465 l
156.25 296.23 160.098 296.23 165.754 296.23 c
180.18 296.23 191.246 302.598 191.246 324.258 c
191.246 340.488 l
h
265.922 317.402 m
225.641 317.402 l
225.641 315.703 l
225.641 301.406 231.289 296.113 242.355 296.113 c
249.332 296.113 258.227 296.582 263.762 297.441 c
264.0 297.441 264.121 297.441 264.359 297.441 c
265.32 297.441 266.285 296.953 266.285 295.742 c
266.285 291.66 l
266.285 290.098 265.805 289.258 263.883 288.887 c
257.027 287.578 250.41 286.855 242.355 286.855 c
228.523 286.855 215.055 293.34 215.055 315.703 c
215.055 326.543 l
215.055 343.73 224.555 354.668 241.754 354.668 c
259.313 354.668 268.207 343.613 268.207 326.543 c
268.207 320.039 l
268.207 318.477 267.367 317.402 265.922 317.402 c
h
257.504 326.543 m
257.504 340.117 252.336 345.41 241.754 345.41 c
231.41 345.41 225.641 339.531 225.641 326.543 c
225.641 325.449 l
257.504 325.449 l
257.504 326.543 l
h
307.289 286.855 m
303.563 286.855 297.91 287.324 293.223 288.164 c
293.223 266.406 l
293.223 265.195 292.262 264.121 290.938 264.121 c
284.805 264.121 l
283.598 264.121 282.637 265.078 282.637 266.406 c
282.637 349.141 l
282.637 350.703 282.996 351.426 285.168 351.914 c
291.539 353.477 299.957 354.668 307.289 354.668 c
325.211 354.668 333.508 343.008 333.508 324.98 c
333.508 316.309 l
333.508 297.441 324.848 286.855 307.289 286.855 c
h
322.926 324.98 m
322.926 337.598 319.195 345.781 307.289 345.781 c
302.242 345.781 296.586 345.176 293.223 344.57 c
293.223 296.953 l
297.188 296.23 303.441 295.742 307.289 295.742 c
319.078 295.742 322.926 303.438 322.926 316.309 c
322.926 324.98 l
h
391.348 287.695 m
385.816 287.695 l
384.492 287.695 383.414 288.77 383.414 290.098 c
383.414 292.734 l
377.637 289.375 371.625 286.855 364.895 286.855 c
354.668 286.855 345.289 291.309 345.289 306.328 c
345.289 307.773 l
345.289 320.762 352.867 327.266 374.273 327.266 c
383.168 327.266 l
383.168 332.07 l
383.168 342.168 379.684 345.664 370.305 345.664 c
362.484 345.664 356.715 345.176 351.902 344.688 c
351.664 344.688 351.543 344.688 351.305 344.688 c
350.219 344.688 349.141 345.059 349.141 346.621 c
349.141 350.82 l
349.141 352.148 349.98 352.871 351.664 353.105 c
356.594 353.945 362.125 354.668 370.305 354.668 c
387.02 354.668 393.754 346.25 393.754 332.07 c
393.754 290.098 l
393.754 288.77 392.672 287.695 391.348 287.695 c
h
383.168 319.688 m
374.273 319.688 l
359.723 319.688 355.875 316.426 355.875 307.891 c
355.875 306.445 l
355.875 297.793 359.961 295.508 366.934 295.508 c
372.465 295.508 377.398 297.188 383.168 300.313 c
383.168 319.688 l
h
437.285 345.527 m
431.754 345.527 426.703 344.102 420.688 340.488 c
420.688 290.098 l
420.688 288.887 419.609 287.695 418.285 287.695 c
412.395 287.695 l
411.191 287.695 410.105 288.77 410.105 290.098 c
410.105 351.426 l
410.105 352.754 411.07 353.828 412.395 353.828 c
418.047 353.828 l
419.363 353.828 420.332 352.754 420.332 351.426 c
420.332 348.906 l
426.344 353.105 431.875 354.668 437.285 354.668 c
438.969 354.668 439.809 353.945 439.809 352.52 c
439.809 347.578 l
439.809 346.25 438.969 345.527 437.285 345.527 c
h
484.184 287.461 m
481.777 287.09 478.652 286.855 476.367 286.855 c
465.305 286.855 460.016 289.727 460.016 302.969 c
460.016 344.941 l
448.352 346.25 l
447.027 346.387 446.063 347.09 446.063 348.418 c
446.063 351.66 l
446.063 352.988 447.027 353.828 448.352 353.828 c
460.016 353.828 l
460.016 365.625 l
460.016 366.816 460.855 367.773 462.18 368.027 c
468.434 368.984 l
468.551 368.984 468.672 368.984 468.793 368.984 c
469.758 368.984 470.598 368.145 470.598 366.934 c
470.598 353.828 l
483.586 353.828 l
484.906 353.828 485.984 352.754 485.984 351.426 c
485.984 347.344 l
485.984 346.016 484.906 344.941 483.586 344.941 c
470.598 344.941 l
470.598 302.969 l
470.598 296.348 472.281 295.391 477.09 295.391 c
483.824 295.391 l
485.508 295.391 486.348 294.902 486.348 293.711 c
486.348 289.492 l
486.348 288.418 485.746 287.695 484.184 287.461 c
h
574.734 287.695 m
568.965 287.695 l
567.641 287.695 566.559 288.77 566.559 290.098 c
566.559 332.676 l
566.559 342.773 561.871 345.527 555.613 345.527 c
551.289 345.527 546.234 344.102 541.547 342.285 c
542.266 339.648 542.629 336.523 542.629 332.91 c
542.629 290.098 l
542.629 288.887 541.785 287.695 540.465 287.695 c
534.094 287.695 l
532.887 287.695 532.047 288.77 532.047 290.098 c
532.047 332.91 l
532.047 343.379 529.039 345.527 522.789 345.527 c
518.457 345.527 513.164 343.379 508.113 340.84 c
508.113 290.098 l
508.113 288.887 507.273 287.695 505.953 287.695 c
499.574 287.695 l
498.375 287.695 497.535 288.77 497.535 290.098 c
497.535 351.426 l
497.535 352.754 498.496 353.828 499.82 353.828 c
505.828 353.828 l
507.152 353.828 508.113 352.754 508.113 351.426 c
508.113 349.141 l
512.926 352.148 519.059 354.805 525.676 354.805 c
530.844 354.805 534.691 353.359 537.699 349.863 c
544.313 352.988 551.406 354.805 557.66 354.805 c
568.484 354.805 577.145 349.375 577.145 332.676 c
577.145 290.098 l
577.145 288.77 576.059 287.695 574.734 287.695 c
h
642.195 317.402 m
601.914 317.402 l
601.914 315.703 l
601.914 301.406 607.563 296.113 618.629 296.113 c
625.605 296.113 634.504 296.582 640.035 297.441 c
640.273 297.441 640.395 297.441 640.637 297.441 c
641.598 297.441 642.559 296.953 642.559 295.742 c
642.559 291.66 l
642.559 290.098 642.078 289.258 640.156 288.887 c
633.301 287.578 626.684 286.855 618.629 286.855 c
604.801 286.855 591.328 293.34 591.328 315.703 c
591.328 326.543 l
591.328 343.73 600.828 354.668 618.027 354.668 c
635.586 354.668 644.48 343.613 644.48 326.543 c
644.48 320.039 l
644.48 318.477 643.645 317.402 642.195 317.402 c
h
633.777 326.543 m
633.777 340.117 628.609 345.41 618.027 345.41 c
607.688 345.41 601.914 339.531 601.914 326.543 c
601.914 325.449 l
633.777 325.449 l
633.777 326.543 l
h
707.141 287.695 m
701.363 287.695 l
700.039 287.695 698.961 288.77 698.961 290.098 c
698.961 329.668 l
698.961 341.816 694.867 345.527 685.73 345.527 c
680.68 345.527 675.027 343.613 669.496 340.84 c
669.496 290.098 l
669.496 288.887 668.414 287.695 667.09 287.695 c
661.195 287.695 l
659.996 287.695 658.91 288.77 658.91 290.098 c
658.91 351.426 l
658.91 352.754 659.871 353.828 661.195 353.828 c
667.211 353.828 l
668.535 353.828 669.496 352.754 669.496 351.426 c
669.496 349.141 l
676.109 352.871 681.523 354.668 688.617 354.668 c
703.047 354.668 709.543 345.664 709.543 329.668 c
709.543 290.098 l
709.543 288.77 708.457 287.695 707.141 287.695 c
h
758.844 287.461 m
756.441 287.09 753.313 286.855 751.031 286.855 c
739.965 286.855 734.672 289.727 734.672 302.969 c
734.672 344.941 l
723.008 346.25 l
721.684 346.387 720.723 347.09 720.723 348.418 c
720.723 351.66 l
720.723 352.988 721.684 353.828 723.008 353.828 c
734.672 353.828 l
734.672 365.625 l
734.672 366.816 735.52 367.773 736.836 368.027 c
743.09 368.984 l
743.215 368.984 743.328 368.984 743.453 368.984 c
744.414 368.984 745.254 368.145 745.254 366.934 c
745.254 353.828 l
758.242 353.828 l
759.566 353.828 760.648 352.754 760.648 351.426 c
760.648 347.344 l
760.648 346.016 759.566 344.941 758.242 344.941 c
745.254 344.941 l
745.254 302.969 l
745.254 296.348 746.938 295.391 751.746 295.391 c
758.484 295.391 l
760.168 295.391 761.012 294.902 761.012 293.711 c
761.012 289.492 l
761.012 288.418 760.41 287.695 758.844 287.461 c
h
825.859 286.855 m
808.184 286.855 799.164 298.516 799.164 316.191 c
799.164 325.332 l
799.164 343.008 808.184 354.668 825.859 354.668 c
843.539 354.668 852.676 343.008 852.676 325.332 c
852.676 316.191 l
852.676 298.516 843.539 286.855 825.859 286.855 c
h
842.094 325.332 m
842.094 337.598 837.164 345.41 825.859 345.41 c
814.68 345.41 809.746 337.715 809.746 325.332 c
809.746 316.191 l
809.746 303.926 814.555 296.113 825.859 296.113 c
837.047 296.113 842.094 303.809 842.094 316.191 c
842.094 325.332 l
h
899.336 370.781 m
893.563 370.781 l
887.91 370.781 886.23 369.102 886.23 362.5 c
886.23 353.828 l
898.855 353.828 l
900.18 353.828 901.145 352.871 901.145 351.66 c
901.145 346.973 l
901.145 345.781 900.18 344.941 898.855 344.941 c
886.23 344.941 l
886.23 290.098 l
886.23 288.887 885.145 287.695 883.945 287.695 c
878.051 287.695 l
876.73 287.695 875.645 288.887 875.645 290.098 c
875.645 344.941 l
863.984 346.25 l
862.656 346.387 861.699 347.227 861.699 348.418 c
861.699 351.66 l
861.699 352.871 862.656 353.828 863.984 353.828 c
875.645 353.828 l
875.645 362.5 l
875.645 375.352 881.898 379.199 892.48 379.199 c
895.727 379.199 897.652 378.848 899.219 378.477 c
900.535 378.125 901.504 377.637 901.504 376.563 c
901.504 372.598 l
901.504 371.27 900.66 370.781 899.336 370.781 c
h
1014.06 287.695 m
1008.17 287.695 l
1006.85 287.695 1005.76 288.77 1005.76 290.098 c
1005.76 361.406 l
1005.76 361.641 1005.76 361.777 1005.64 361.777 c
1005.52 361.777 1005.52 361.777 1005.4 361.523 c
988.203 325.938 l
987.004 323.535 985.801 322.441 982.793 322.441 c
977.262 322.441 l
974.258 322.441 973.051 323.535 971.852 325.938 c
954.652 361.523 l
954.531 361.777 954.531 361.777 954.414 361.777 c
954.293 361.777 954.293 361.641 954.293 361.406 c
954.293 290.098 l
954.293 288.77 953.215 287.695 951.891 287.695 c
945.996 287.695 l
944.672 287.695 943.59 288.77 943.59 290.098 c
943.59 373.555 l
943.59 375.488 945.152 377.051 947.074 377.051 c
954.895 377.051 l
957.063 377.051 958.023 376.563 958.738 375.0 c
978.586 333.75 l
979.066 332.676 979.426 332.422 980.027 332.422 c
980.629 332.422 980.992 332.676 981.469 333.75 c
1001.31 375.0 l
1002.04 376.563 1003.0 377.051 1005.16 377.051 c
1012.98 377.051 l
1014.9 377.051 1016.46 375.488 1016.46 373.555 c
1016.46 290.098 l
1016.46 288.77 1015.38 287.695 1014.06 287.695 c
h
1043.93 364.414 m
1037.79 364.414 l
1036.47 364.414 1035.39 365.488 1035.39 366.816 c
1035.39 376.445 l
1035.39 377.773 1036.47 378.848 1037.79 378.848 c
1043.93 378.848 l
1045.25 378.848 1046.33 377.773 1046.33 376.445 c
1046.33 366.816 l
1046.33 365.488 1045.25 364.414 1043.93 364.414 c
h
1043.68 287.695 m
1037.91 287.695 l
1036.59 287.695 1035.51 288.77 1035.51 290.098 c
1035.51 351.426 l
1035.51 352.754 1036.59 353.828 1037.91 353.828 c
1043.68 353.828 l
1045.0 353.828 1046.09 352.754 1046.09 351.426 c
1046.09 290.098 l
1046.09 288.77 1045.0 287.695 1043.68 287.695 c
h
1102.65 288.164 m
1098.68 287.461 1093.27 286.855 1087.62 286.855 c
1071.27 286.855 1062.0 298.398 1062.0 316.074 c
1062.0 325.449 l
1062.0 343.125 1071.14 354.668 1087.62 354.668 c
1093.15 354.668 1098.68 354.082 1102.65 353.359 c
1104.57 352.988 1105.06 352.383 1105.06 350.703 c
1105.06 346.387 l
1105.06 345.176 1104.09 344.57 1103.01 344.57 c
1102.77 344.57 1102.65 344.57 1102.53 344.57 c
1097.24 345.176 1093.51 345.41 1087.62 345.41 c
1078.0 345.41 1072.59 339.043 1072.59 325.449 c
1072.59 316.074 l
1072.59 302.598 1077.88 296.113 1087.62 296.113 c
1093.51 296.113 1097.24 296.348 1102.53 296.953 c
1102.65 296.953 1102.77 296.953 1103.01 296.953 c
1104.09 296.953 1105.06 296.348 1105.06 295.156 c
1105.06 290.82 l
1105.06 289.258 1104.57 288.535 1102.65 288.164 c
h
1145.7 345.527 m
1140.18 345.527 1135.12 344.102 1129.11 340.488 c
1129.11 290.098 l
1129.11 288.887 1128.03 287.695 1126.7 287.695 c
1120.81 287.695 l
1119.61 287.695 1118.52 288.77 1118.52 290.098 c
1118.52 351.426 l
1118.52 352.754 1119.49 353.828 1120.81 353.828 c
1126.46 353.828 l
1127.78 353.828 1128.75 352.754 1128.75 351.426 c
1128.75 348.906 l
1134.76 353.105 1140.29 354.668 1145.7 354.668 c
1147.38 354.668 1148.23 353.945 1148.23 352.52 c
1148.23 347.578 l
1148.23 346.25 1147.38 345.527 1145.7 345.527 c
h
1183.05 286.855 m
1165.37 286.855 1156.36 298.516 1156.36 316.191 c
1156.36 325.332 l
1156.36 343.008 1165.37 354.668 1183.05 354.668 c
1200.73 354.668 1209.86 343.008 1209.86 325.332 c
1209.86 316.191 l
1209.86 298.516 1200.73 286.855 1183.05 286.855 c
h
1199.29 325.332 m
1199.29 337.598 1194.36 345.41 1183.05 345.41 c
1171.86 345.41 1166.93 337.715 1166.93 325.332 c
1166.93 316.191 l
1166.93 303.926 1171.75 296.113 1183.05 296.113 c
1194.24 296.113 1199.29 303.809 1199.29 316.191 c
1199.29 325.332 l
h
1247.87 318.477 m
1223.94 318.477 l
1222.62 318.477 1221.65 319.199 1221.65 320.527 c
1221.65 325.215 l
1221.65 326.406 1222.62 327.383 1223.94 327.383 c
1247.87 327.383 l
1249.19 327.383 1250.16 326.543 1250.16 325.215 c
1250.16 320.527 l
1250.16 319.316 1249.19 318.477 1247.87 318.477 c
h
1332.93 287.695 m
1327.39 287.695 l
1326.07 287.695 1324.99 288.77 1324.99 290.098 c
1324.99 292.734 l
1319.22 289.375 1313.2 286.855 1306.46 286.855 c
1296.25 286.855 1286.86 291.309 1286.86 306.328 c
1286.86 307.773 l
1286.86 320.762 1294.44 327.266 1315.85 327.266 c
1324.75 327.266 l
1324.75 332.07 l
1324.75 342.168 1321.26 345.664 1311.89 345.664 c
1304.06 345.664 1298.29 345.176 1293.48 344.688 c
1293.24 344.688 1293.13 344.688 1292.88 344.688 c
1291.8 344.688 1290.71 345.059 1290.71 346.621 c
1290.71 350.82 l
1290.71 352.148 1291.56 352.871 1293.24 353.105 c
1298.18 353.945 1303.7 354.668 1311.89 354.668 c
1328.59 354.668 1335.33 346.25 1335.33 332.07 c
1335.33 290.098 l
1335.33 288.77 1334.25 287.695 1332.93 287.695 c
h
1324.75 319.688 m
1315.85 319.688 l
1301.3 319.688 1297.45 316.426 1297.45 307.891 c
1297.45 306.445 l
1297.45 297.793 1301.54 295.508 1308.52 295.508 c
1314.04 295.508 1318.98 297.188 1324.75 300.313 c
1324.75 319.688 l
h
1399.91 287.695 m
1394.14 287.695 l
1392.81 287.695 1391.73 288.77 1391.73 290.098 c
1391.73 329.668 l
1391.73 341.816 1387.64 345.527 1378.51 345.527 c
1373.46 345.527 1367.8 343.613 1362.27 340.84 c
1362.27 290.098 l
1362.27 288.887 1361.19 287.695 1359.86 287.695 c
1353.98 287.695 l
1352.77 287.695 1351.69 288.77 1351.69 290.098 c
1351.69 351.426 l
1351.69 352.754 1352.64 353.828 1353.98 353.828 c
1359.98 353.828 l
1361.31 353.828 1362.27 352.754 1362.27 351.426 c
1362.27 349.141 l
1368.89 352.871 1374.3 354.668 1381.39 354.668 c
1395.82 354.668 1402.31 345.664 1402.31 329.668 c
1402.31 290.098 l
1402.31 288.77 1401.23 287.695 1399.91 287.695 c
h
1464.84 288.887 m
1457.39 287.461 1450.06 286.855 1442.71 286.855 c
1424.8 286.855 1416.5 298.516 1416.5 316.563 c
1416.5 325.215 l
1416.5 344.102 1425.16 354.668 1442.71 354.668 c
1446.45 354.668 1452.1 354.316 1456.79 353.477 c
1456.79 375.84 l
1456.79 377.051 1457.75 378.125 1459.07 378.125 c
1465.2 378.125 l
1466.41 378.125 1467.38 377.168 1467.38 375.84 c
1467.38 291.66 l
1467.38 290.098 1467.01 289.258 1464.84 288.887 c
h
1456.79 344.57 m
1452.82 345.293 1446.56 345.41 1442.71 345.41 c
1430.94 345.41 1427.09 338.086 1427.09 325.215 c
1427.09 316.563 l
1427.09 303.438 1430.81 296.113 1442.71 296.113 c
1446.81 296.113 1452.7 296.465 1456.79 296.836 c
1456.79 344.57 l
h
1579.84 287.695 m
1572.38 287.695 l
1570.45 287.695 1569.13 288.418 1568.52 289.609 c
1531.37 360.215 l
1531.25 360.449 1531.13 360.566 1531.01 360.566 c
1530.89 360.566 1530.89 360.449 1530.89 360.215 c
1530.89 289.98 l
1530.89 288.77 1529.92 287.695 1528.72 287.695 c
1522.47 287.695 l
1521.26 287.695 1520.3 287.93 1520.3 289.141 c
1520.3 373.672 l
1520.3 375.605 1521.86 377.051 1523.79 377.051 c
1530.4 377.051 l
1533.77 377.051 1534.38 376.445 1535.33 374.629 c
1572.26 304.414 l
1572.49 304.043 l
1572.62 304.043 1572.62 304.297 1572.62 304.414 c
1572.62 374.766 l
1572.62 375.957 1573.57 377.051 1574.77 377.051 c
1581.15 377.051 l
1582.47 377.051 1583.32 375.957 1583.32 374.766 c
1583.32 291.172 l
1583.32 289.258 1581.76 287.695 1579.84 287.695 c
h
1644.52 287.695 m
1638.99 287.695 l
1637.68 287.695 1636.59 288.77 1636.59 290.098 c
1636.59 292.734 l
1630.82 289.375 1624.8 286.855 1618.07 286.855 c
1607.85 286.855 1598.47 291.309 1598.47 306.328 c
1598.47 307.773 l
1598.47 320.762 1606.05 327.266 1627.45 327.266 c
1636.35 327.266 l
1636.35 332.07 l
1636.35 342.168 1632.86 345.664 1623.48 345.664 c
1615.66 345.664 1609.89 345.176 1605.09 344.688 c
1604.84 344.688 1604.72 344.688 1604.48 344.688 c
1603.4 344.688 1602.31 345.059 1602.31 346.621 c
1602.31 350.82 l
1602.31 352.148 1603.15 352.871 1604.84 353.105 c
1609.77 353.945 1615.3 354.668 1623.48 354.668 c
1640.2 354.668 1646.93 346.25 1646.93 332.07 c
1646.93 290.098 l
1646.93 288.77 1645.85 287.695 1644.52 287.695 c
h
1636.35 319.688 m
1627.45 319.688 l
1612.9 319.688 1609.05 316.426 1609.05 307.891 c
1609.05 306.445 l
1609.05 297.793 1613.14 295.508 1620.12 295.508 c
1625.64 295.508 1630.57 297.188 1636.35 300.313 c
1636.35 319.688 l
h
1711.52 287.695 m
1705.73 287.695 l
1704.41 287.695 1703.33 288.77 1703.33 290.098 c
1703.33 329.668 l
1703.33 341.816 1699.24 345.527 1690.11 345.527 c
1685.05 345.527 1679.4 343.613 1673.87 340.84 c
1673.87 290.098 l
1673.87 288.887 1672.78 287.695 1671.46 287.695 c
1665.57 287.695 l
1664.36 287.695 1663.29 288.77 1663.29 290.098 c
1663.29 351.426 l
1663.29 352.754 1664.25 353.828 1665.57 353.828 c
1671.58 353.828 l
1672.91 353.828 1673.87 352.754 1673.87 351.426 c
1673.87 349.141 l
1680.48 352.871 1685.89 354.668 1692.99 354.668 c
1707.42 354.668 1713.92 345.664 1713.92 329.668 c
1713.92 290.098 l
1713.92 288.77 1712.83 287.695 1711.52 287.695 c
h
1754.8 286.855 m
1737.12 286.855 1728.11 298.516 1728.11 316.191 c
1728.11 325.332 l
1728.11 343.008 1737.12 354.668 1754.8 354.668 c
1772.48 354.668 1781.62 343.008 1781.62 325.332 c
1781.62 316.191 l
1781.62 298.516 1772.48 286.855 1754.8 286.855 c
h
1771.04 325.332 m
1771.04 337.598 1766.11 345.41 1754.8 345.41 c
1743.61 345.41 1738.68 337.715 1738.68 325.332 c
1738.68 316.191 l
1738.68 303.926 1743.5 296.113 1754.8 296.113 c
1765.98 296.113 1771.04 303.809 1771.04 316.191 c
1771.04 325.332 l
h
1827.06 287.461 m
1824.65 287.09 1821.52 286.855 1819.24 286.855 c
1808.18 286.855 1802.88 289.727 1802.88 302.969 c
1802.88 344.941 l
1791.22 346.25 l
1789.9 346.387 1788.94 347.09 1788.94 348.418 c
1788.94 351.66 l
1788.94 352.988 1789.9 353.828 1791.22 353.828 c
1802.88 353.828 l
1802.88 365.625 l
1802.88 366.816 1803.73 367.773 1805.05 368.027 c
1811.3 368.984 l
1811.43 368.984 1811.54 368.984 1811.67 368.984 c
1812.63 368.984 1813.47 368.145 1813.47 366.934 c
1813.47 353.828 l
1826.45 353.828 l
1827.78 353.828 1828.86 352.754 1828.86 351.426 c
1828.86 347.344 l
1828.86 346.016 1827.78 344.941 1826.45 344.941 c
1813.47 344.941 l
1813.47 302.969 l
1813.47 296.348 1815.16 295.391 1819.96 295.391 c
1826.7 295.391 l
1828.38 295.391 1829.22 294.902 1829.22 293.711 c
1829.22 289.492 l
1829.22 288.418 1828.63 287.695 1827.06 287.461 c
h
1888.55 317.402 m
1848.25 317.402 l
1848.25 315.703 l
1848.25 301.406 1853.91 296.113 1864.97 296.113 c
1871.94 296.113 1880.85 296.582 1886.38 297.441 c
1886.62 297.441 1886.74 297.441 1886.98 297.441 c
1887.94 297.441 1888.91 296.953 1888.91 295.742 c
1888.91 291.66 l
1888.91 290.098 1888.42 289.258 1886.49 288.887 c
1879.64 287.578 1873.03 286.855 1864.97 286.855 c
1851.14 286.855 1837.68 293.34 1837.68 315.703 c
1837.68 326.543 l
1837.68 343.73 1847.18 354.668 1864.38 354.668 c
1881.93 354.668 1890.83 343.613 1890.83 326.543 c
1890.83 320.039 l
1890.83 318.477 1889.99 317.402 1888.55 317.402 c
h
1880.13 326.543 m
1880.13 340.117 1874.95 345.41 1864.38 345.41 c
1854.03 345.41 1848.25 339.531 1848.25 326.543 c
1848.25 325.449 l
1880.13 325.449 l
1880.13 326.543 l
h
1944.02 288.164 m
1940.06 287.461 1934.64 286.855 1928.98 286.855 c
1912.64 286.855 1903.38 298.398 1903.38 316.074 c
1903.38 325.449 l
1903.38 343.125 1912.52 354.668 1928.98 354.668 c
1934.52 354.668 1940.06 354.082 1944.02 353.359 c
1945.95 352.988 1946.43 352.383 1946.43 350.703 c
1946.43 346.387 l
1946.43 345.176 1945.47 344.57 1944.39 344.57 c
1944.14 344.57 1944.02 344.57 1943.91 344.57 c
1938.61 345.176 1934.88 345.41 1928.98 345.41 c
1919.36 345.41 1913.95 339.043 1913.95 325.449 c
1913.95 316.074 l
1913.95 302.598 1919.25 296.113 1928.98 296.113 c
1934.88 296.113 1938.61 296.348 1943.91 296.953 c
1944.02 296.953 1944.14 296.953 1944.39 296.953 c
1945.47 296.953 1946.43 296.348 1946.43 295.156 c
1946.43 290.82 l
1946.43 289.258 1945.95 288.535 1944.02 288.164 c
h
2008.11 287.695 m
2002.34 287.695 l
2001.02 287.695 1999.94 288.77 1999.94 290.098 c
1999.94 329.668 l
1999.94 341.68 1994.89 345.41 1987.07 345.41 c
1983.34 345.41 1975.77 344.453 1970.48 342.051 c
1970.48 290.098 l
1970.48 288.887 1969.39 287.695 1968.07 287.695 c
1962.18 287.695 l
1960.98 287.695 1959.89 288.77 1959.89 290.098 c
1959.89 375.723 l
1959.89 377.051 1960.86 378.125 1962.18 378.125 c
1968.19 378.125 l
1969.51 378.125 1970.48 377.051 1970.48 375.723 c
1970.48 350.938 l
1976.25 353.477 1983.71 354.668 1988.88 354.668 c
2001.62 354.668 2010.53 347.344 2010.53 329.668 c
2010.53 290.098 l
2010.53 288.77 2009.44 287.695 2008.11 287.695 c
h
2075.1 287.695 m
2069.32 287.695 l
2068.01 287.695 2066.93 288.77 2066.93 290.098 c
2066.93 329.668 l
2066.93 341.816 2062.83 345.527 2053.69 345.527 c
2048.64 345.527 2042.99 343.613 2037.46 340.84 c
2037.46 290.098 l
2037.46 288.887 2036.38 287.695 2035.06 287.695 c
2029.16 287.695 l
2027.96 287.695 2026.88 288.77 2026.88 290.098 c
2026.88 351.426 l
2026.88 352.754 2027.84 353.828 2029.16 353.828 c
2035.18 353.828 l
2036.49 353.828 2037.46 352.754 2037.46 351.426 c
2037.46 349.141 l
2044.07 352.871 2049.48 354.668 2056.58 354.668 c
2071.02 354.668 2077.5 345.664 2077.5 329.668 c
2077.5 290.098 l
2077.5 288.77 2076.43 287.695 2075.1 287.695 c
h
2118.39 286.855 m
2100.71 286.855 2091.69 298.516 2091.69 316.191 c
2091.69 325.332 l
2091.69 343.008 2100.71 354.668 2118.39 354.668 c
2136.06 354.668 2145.21 343.008 2145.21 325.332 c
2145.21 316.191 l
2145.21 298.516 2136.06 286.855 2118.39 286.855 c
h
2134.63 325.332 m
2134.63 337.598 2129.7 345.41 2118.39 345.41 c
2107.21 345.41 2102.27 337.715 2102.27 325.332 c
2102.27 316.191 l
2102.27 303.926 2107.09 296.113 2118.39 296.113 c
2129.57 296.113 2134.63 303.809 2134.63 316.191 c
2134.63 325.332 l
h
2169.02 287.695 m
2162.77 287.695 l
2161.56 287.695 2160.6 288.77 2160.6 290.098 c
2160.6 375.84 l
2160.6 377.051 2161.45 378.125 2162.77 378.125 c
2169.02 378.125 l
2170.23 378.125 2171.18 377.168 2171.18 375.84 c
2171.18 290.098 l
2171.18 288.887 2170.34 287.695 2169.02 287.695 c
h
2213.27 286.855 m
2195.6 286.855 2186.57 298.516 2186.57 316.191 c
2186.57 325.332 l
2186.57 343.008 2195.6 354.668 2213.27 354.668 c
2230.95 354.668 2240.09 343.008 2240.09 325.332 c
2240.09 316.191 l
2240.09 298.516 2230.95 286.855 2213.27 286.855 c
h
2229.5 325.332 m
2229.5 337.598 2224.57 345.41 2213.27 345.41 c
2202.09 345.41 2197.16 337.715 2197.16 325.332 c
2197.16 316.191 l
2197.16 303.926 2201.96 296.113 2213.27 296.113 c
2224.45 296.113 2229.5 303.809 2229.5 316.191 c
2229.5 325.332 l
h
2306.82 345.781 m
2302.5 344.941 l
2304.67 342.656 2306.59 339.043 2306.59 332.539 c
2306.59 331.582 l
2306.59 318.359 2298.41 311.016 2279.89 311.016 c
2273.52 311.016 2269.43 311.992 2265.95 313.418 c
2263.89 312.461 2262.94 311.133 2262.94 309.336 c
2262.94 307.285 2263.89 306.211 2266.66 305.488 c
2284.58 300.918 l
2296.37 297.91 2307.68 294.551 2307.68 283.242 c
2307.68 282.285 l
2307.68 270.742 2299.98 263.633 2280.25 263.633 c
2261.25 263.633 2252.6 270.977 2252.6 282.754 c
2252.6 283.848 l
2252.6 290.586 2256.2 296.113 2260.18 299.121 c
2259.32 299.473 l
2255.48 301.152 2253.8 305.137 2253.8 308.848 c
2253.8 308.984 l
2253.8 312.227 2255.36 315.703 2258.73 317.637 c
2255.0 321.133 2253.19 325.449 2253.19 331.582 c
2253.19 332.539 l
2253.19 343.242 2259.21 353.828 2279.89 353.828 c
2306.23 353.828 l
2307.68 353.828 2309.0 352.637 2309.0 351.191 c
2309.0 348.066 l
2309.0 346.504 2308.15 346.016 2306.82 345.781 c
h
2297.09 283.242 m
2297.09 287.93 2293.24 289.863 2282.42 292.617 c
2268.83 296.113 l
2265.34 293.105 2262.94 290.098 2262.94 283.848 c
2262.94 282.754 l
2262.94 276.035 2266.9 271.816 2280.25 271.816 c
2293.96 271.816 2297.09 275.664 2297.09 282.285 c
2297.09 283.242 l
h
2296.13 332.539 m
2296.13 339.766 2292.88 345.41 2279.89 345.41 c
2266.43 345.41 2263.66 339.277 2263.66 332.539 c
2263.66 331.582 l
2263.66 326.289 2266.06 319.316 2279.89 319.316 c
2292.88 319.316 2296.13 324.375 2296.13 331.582 c
2296.13 332.539 l
h
2372.73 350.938 m
2352.89 281.68 l
2349.16 268.691 2344.71 263.887 2330.88 263.887 c
2327.51 263.887 2323.3 264.355 2320.78 264.961 c
2319.34 265.332 2318.25 265.684 2318.25 266.895 c
2318.25 271.328 l
2318.25 272.656 2319.22 273.262 2320.54 273.262 c
2320.65 273.262 2320.78 273.262 2320.9 273.262 c
2323.55 273.027 2328.96 272.539 2331.6 272.539 c
2338.46 272.539 2341.46 274.336 2343.51 282.754 c
2344.71 287.695 l
2343.03 287.695 l
2339.41 287.695 2336.29 288.535 2334.13 295.996 c
2318.14 350.938 l
2318.01 351.191 2318.01 351.543 2318.01 351.797 c
2318.01 352.988 2318.73 353.828 2320.18 353.828 c
2326.79 353.828 l
2327.75 353.828 2328.59 352.871 2328.84 351.914 c
2343.03 299.727 l
2343.63 297.305 2344.47 297.07 2345.31 297.07 c
2347.23 297.07 l
2361.9 352.031 l
2362.15 352.988 2363.11 353.828 2364.19 353.828 c
2370.93 353.828 l
2372.13 353.828 2372.85 352.988 2372.85 351.797 c
2372.85 351.543 2372.85 351.191 2372.73 350.938 c
0.0 0.0 0.0 0.560547 sc
f
Q
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
